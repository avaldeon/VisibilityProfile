# -*- coding: utf-8 -*-
"""
/***************************************************************************
 VisibilityProfile
                                 A QGIS plugin
 El plugin Visibility Profile genera imágenes que muestran el perfil del terreno entre dos puntos: el observador y el objetivo, teniendo en cuenta la altura de ambos elementos, mostrando así si el objetivo es visible o no.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-10-11
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Aitor Valdeón - Forestalia Renovables S.L.
        email                : avaldeon@forestalia.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import (QgsApplication, QgsProcessing, QgsProcessingAlgorithm, QgsProcessingParameterFeatureSource, 
                       QgsProcessingParameterRasterLayer, QgsProcessingParameterNumber, 
                       QgsProcessingParameterFileDestination, QgsPointXY)
from qgis.core import QgsRaster, QgsRasterLayer, QgsProject, QgsGeometry, QgsFeature
import processing
#from qgis.gui import QgsProcessingDialog
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .visibility_profile_dialog import VisibilityProfileDialog
import os.path
import numpy as np
import matplotlib.pyplot as plt
#☺from .herramienta import VisibilityProfileTool
#from .algorithm_provider import CustomAlgorithmProvider
#from .processing_algorithm import VisibilityProfileProcessing

		
class VisibilityProfile:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.action = None
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'VisibilityProfile_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Visibility Profile')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.provider = None
		


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('VisibilityProfile', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        #icon_path = ':/plugins/visibility_profile/icon.png'
        icon_path = QIcon(os.path.join(self.plugin_dir, "icon.png"))		
        self.add_action(
            icon_path,
            text=self.tr(u'Visibility Profile'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        '''# Inicializamos el proveedor de algoritmos solo si no existe
        self.provider = CustomAlgorithmProvider()
        # Añadimos el proveedor al registro de algoritmos de QGIS
        if not QgsApplication.processingRegistry().providerById(self.provider.id()):
            QgsApplication.processingRegistry().addProvider(self.provider)
		
        self.action = QAction(
            QIcon(os.path.join(self.plugin_dir, "icon.png")),
            "Ejecutar Herramienta",
            self.iface.mainWindow()
        )
        self.action.triggered.connect(self.run)  # Conecta el evento del botón a la función run
        self.iface.addToolBarIcon(self.action)  # Agrega el icono de la acción a la barra de herramientas'''



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Visibility Profile'),
                action)
            self.iface.removeToolBarIcon(action)
        '''if self.action is not None:
            self.iface.removeToolBarIcon(self.action)
            self.action = None
        # Elimina el proveedor de algoritmos al desactivar el plugin
        QgsApplication.processingRegistry().removeProvider(self.provider)'''


    def run(self):
        
        if self.first_start == True:
            self.first_start = False
            self.dlg = VisibilityProfileDialog()
		# show the dialog
        self.dlg.show()
		# Run the dialog event loop
        #result = self.dlg.exec_()
        # Crea una instancia de tu herramienta
        #herramienta = VisibilityProfileTool()

        # Ejecutar la herramienta usando el cuadro de diálogo estándar
        #processing.execAlgorithmDialog(herramienta.id())

        
